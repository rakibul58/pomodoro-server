// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                 String     @id @default(uuid())
  email              String     @unique
  password           String
  role               UserRole
  needPasswordChange Boolean    @default(false)
  status             UserStatus @default(ACTIVE)
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt
  admin              Admin?
  vendor             Vendor?
  customer           Customer?

  @@map("users")
}

model Admin {
  id     String  @id @default(uuid())
  email  String  @unique
  name   String?
  phone  String?
  userId String  @unique
  user   User    @relation(fields: [userId], references: [id])

  @@map("admins")
}

model Vendor {
  id            String         @id @default(uuid())
  userId        String         @unique
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  isDeleted     Boolean        @default(false)
  email         String         @unique
  phone         String
  name          String?
  logo          String?
  description   String?
  status        ShopStatus     @default(ACTIVE)
  products      Product[]
  shopFollowers ShopFollower[]
  isOnboarded   Boolean        @default(false)

  @@map("vendors")
}

model Customer {
  id            String         @id @default(uuid())
  userId        String         @unique
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  name          String
  phone         String
  email         String         @unique
  address       String
  profileImg    String?
  isDeleted     Boolean        @default(false)
  shopsFollowed ShopFollower[]

  @@map("customers")
}

model Product {
  id             String    @id @default(uuid())
  name           String
  description    String
  price          Decimal   @db.Decimal(10, 2)
  category       Category? @relation(fields: [categoryId], references: [id])
  categoryId     String?
  vendor         Vendor    @relation(fields: [vendorId], references: [id])
  vendorId       String
  images         String[]
  inventoryCount Int
  discount       Decimal?  @db.Decimal(5, 2)
  isFlashSale    Boolean   @default(false)
  averageRating  Float     @default(0.0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isDeleted Boolean  @default(false)

  @@map("products")
}

model Category {
  id          String    @id @default(uuid())
  name        String    @unique
  description String?
  image       String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  isDeleted   Boolean   @default(false)
  products    Product[]

  @@map("categories")
}

model ShopFollower {
  id         String   @id @default(uuid())
  customer   Customer @relation(fields: [customerId], references: [id])
  customerId String
  vendor     Vendor   @relation(fields: [vendorId], references: [id])
  vendorId   String

  createdAt DateTime @default(now())

  @@unique([customerId, vendorId])
  @@map("shop_followers")
}

enum UserRole {
  ADMIN
  VENDOR
  CUSTOMER
}

enum UserStatus {
  DELETED
  SUSPENDED
  ACTIVE
}

enum ShopStatus {
  DELETED
  BLACKLISTED
  ACTIVE
}
